select l1.id_menu as id1, l1.nama_menu as menu1, l2.id_menu as id2, l2.nama_menu as menu2, 
l3.id_menu as id3, l3.nama_menu as menu3, 
l4.id_menu as id4, l4.nama_menu as menu4 
from sys_menus_mst l1 
left join sys_menus_mst l2 on l1.root = l2.id_menu and l2.sys_status_aktif='A' 
left join sys_menus_mst l3 on l2.root = l3.id_menu and l3.sys_status_aktif='A'
left join sys_menus_mst l4 on l3.root = l4.id_menu and l4.sys_status_aktif='A'
where l1.sys_status_aktif = 'A'


create or replace view v_menu_app as 
select aa.id_menu, aa.root, aa.level, aa.f_type as type_menu, aa.urutan, aa.nama_menu, aa.keterangan as ket_menu, aa.icon, aa.auth, aa.sys_status_aktif as aktif_menu, 
bb.id_app, bb.nama, bb.f_type as type_app, bb.route, bb.link, bb.akses_role, bb.keterangan as ket_app, bb.sys_status_aktif as aktif_app 
from sys_menus_mst aa left join sys_app_mst bb on aa.f_app = bb.id_app and bb.sys_status_aktif='A' 
where aa.sys_status_aktif='A' ORDER BY GetPriority(aa.id_menu), aa.urutan

DELIMITER $$
DROP FUNCTION IF EXISTS `ACL`.`GetParentIDByID` $$
CREATE FUNCTION `ACL`.`GetParentIDByID` (GivenID INT) RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE rv INT;

    SELECT IFNULL(root,-1) INTO rv FROM
    (SELECT root FROM sys_menus_mst WHERE id_menu = GivenID) A;
    RETURN rv;
END $$
DELIMITER ;


DELIMITER $$
DROP FUNCTION IF EXISTS `ACL`.`GetAncestry` $$
CREATE FUNCTION `ACL`.`GetAncestry` (GivenID INT) RETURNS VARCHAR(1024)
DETERMINISTIC
BEGIN
    DECLARE rv VARCHAR(1024);
    DECLARE cm CHAR(1);
    DECLARE ch INT;

    SET rv = '';
    SET cm = '';
    SET ch = GivenID;
    WHILE ch > 0 DO
        SELECT IFNULL(root,-1) INTO ch FROM
        (SELECT root FROM sys_menus_mst WHERE id_menu = ch) A;
        IF ch > 0 THEN
            SET rv = CONCAT(rv,cm,ch);
            SET cm = ',';
        END IF;
    END WHILE;
    RETURN rv;
END $$
DELIMITER ;



DELIMITER $$
DROP FUNCTION IF EXISTS `ACL`.`GetFamilyTree` $$
CREATE FUNCTION `ACL`.`GetFamilyTree` (GivenID INT) RETURNS varchar(1024)
DETERMINISTIC
BEGIN

    DECLARE rv,q,queue,queue_children VARCHAR(1024);
    DECLARE queue_length,front_id,pos INT;

    SET rv = '';
    SET queue = GivenID;
    SET queue_length = 1;

    WHILE queue_length > 0 DO
        SET front_id = FORMAT(queue,0);
        IF queue_length = 1 THEN
            SET queue = '';
        ELSE
            SET pos = LOCATE(',',queue) + 1;
            SET q = SUBSTR(queue,pos);
            SET queue = q;
        END IF;
        SET queue_length = queue_length - 1;

        SELECT IFNULL(qc,'') INTO queue_children
        FROM (SELECT GROUP_CONCAT(id) qc
        FROM sys_menus_mst WHERE root = front_id) A;

        IF LENGTH(queue_children) = 0 THEN
            IF LENGTH(queue) = 0 THEN
                SET queue_length = 0;
            END IF;
        ELSE
            IF LENGTH(rv) = 0 THEN
                SET rv = queue_children;
            ELSE
                SET rv = CONCAT(rv,',',queue_children);
            END IF;
            IF LENGTH(queue) = 0 THEN
                SET queue = queue_children;
            ELSE
                SET queue = CONCAT(queue,',',queue_children);
            END IF;
            SET queue_length = LENGTH(queue) - LENGTH(REPLACE(queue,',','')) + 1;
        END IF;
    END WHILE;

    RETURN rv;

END $$
DELIMITER ;





delimiter ~

CREATE FUNCTION GetPriority (inID INT) RETURNS VARCHAR(255) DETERMINISTIC
begin
  DECLARE gParentID INT DEFAULT 0;
  DECLARE gPriority VARCHAR(255) DEFAULT '';
  SET gPriority = inID;
  SELECT root INTO gParentID FROM sys_menus_mst WHERE id_menu = inID;
  WHILE gParentID > 0 DO
    SET gPriority = CONCAT(gParentID, '.', gPriority);
    SELECT root INTO gParentID FROM sys_menus_mst WHERE id_menu = gParentID;
  END WHILE;
  RETURN gPriority;
end ~

delimiter ;